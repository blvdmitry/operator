.root {
  --bui-input-switch-min-tabbable-area: 48px;

  display: flex;

  /* Scope the z-index of the indicator */
  position: relative;
  z-index: 0;
}

.label {
  margin-inline-start: var(--bui_spacing_3x);
}

.trigger {
  position: absolute;
  width: 1px;
  height: 1px;
  border: 0;
  padding: 0;
  margin: 0;
  opacity: 0;
}

.inner {
  position: relative;
  display: inline-flex;
  align-items: center;
  vertical-align: top;
}

.hitbox {
  display: none;
}

@media (hover: none) and (pointer: coarse) {
  /* 
  * Using left/top here for centering since transform isn't mirrored in RTL
  */
  .hitbox {
    position: absolute;
    display: inline-block;
    inset-block-start: 50%;

    /* stylelint-disable-next-line safe-logical-properties/validate-logical-usage */
    left: 50%;
    width: max(var(--bui-input-switch-min-tabbable-area), 100%);
    height: max(var(--bui-input-switch-min-tabbable-area), 100%);
    transform: translate(-50%, -50%);
  }
}

.indicator {
  background: var(--bui_color_border);
  position: relative;
  cursor: pointer;
  border-radius: 99px;
  transition: background var(--bui_animation_press);
  height: calc(var(--bui_spacing_1x) * 5);
  width: calc(var(--bui_spacing_1x) * 9);
  min-width: calc(var(--bui_spacing_1x) * 9);
}

.indicator::before {
  content: "";
  position: absolute;
  display: block;
  background-color: var(--bui_color_white);
  border-radius: 50%;
  transition: var(--bui_animation_press);
  transition-property: background, transform;
  z-index: var(--bui_z_index_1);
  box-shadow: var(--bui_shadow_100);
  height: calc(var(--bui_spacing_3x) + var(--bui_spacing_half));
  width: calc(var(--bui_spacing_3x) + var(--bui_spacing_half));
  inset-block-start: calc(var(--bui_spacing_1x) * 0.75);
  inset-inline-start: calc(var(--bui_spacing_1x) * 0.75);
}

.trigger:checked + .inner .indicator::before {
  transform: translateX(var(--bui_spacing_4x));
  background-color: var(--bui_color_white);
}

[dir="rtl"] .trigger:checked + .inner .indicator::before {
  transform: translateX(calc(var(--bui_spacing_4x) * -1));
}

.trigger:checked + .inner .indicator {
  background-color: var(--bui_color_action_background);
}

[data-bui-keyboard] .trigger:focus + .inner .indicator {
  @apply --bui_focus;
}

.trigger[disabled] + .inner {
  cursor: not-allowed;
  opacity: 0.5;
}

.trigger[disabled] + .inner .indicator {
  cursor: inherit;
}

.trigger[disabled] + .inner .label {
  color: var(--bui_color_foreground_disabled);
  cursor: not-allowed;
}

.root--reversed .inner {
  flex-direction: row-reverse;
}

.root--reversed .label {
  margin-inline-start: 0;
  margin-inline-end: var(--bui_spacing_3x);
}
