import React from "react";
import type * as G from "../../types/global";
import type { FormControlProps } from "../FormControl";
import type { ButtonProps } from "../Button";
import type { IconProps } from "../Icon";
type BaseProps = {
    id?: string;
    label?: React.ReactNode;
    subLabel?: React.ReactNode;
    type?: string;
    name: string;
    disabled?: boolean;
    size?: "medium" | "large";
    error?: React.ReactNode | boolean;
    success?: React.ReactNode | boolean;
    helper?: React.ReactNode;
    placeholder?: string;
    startSlot?: React.ReactNode;
    endSlot?: React.ReactNode;
    startIcon?: IconProps["svg"];
    endIcon?: IconProps["svg"];
    prefix?: React.ReactNode;
    suffix?: React.ReactNode;
    maximumLength?: number;
    showLengthCounter?: boolean;
    clearButtonVisibility?: "never" | "always" | "on-edit";
    clearButtonAttributes?: ButtonProps["attributes"];
    clearButtonAriaLabel?: string;
    required?: boolean;
    bordered?: boolean;
    onChange?: G.ChangeHandler<string>;
    onFocus?: (event: React.SyntheticEvent<HTMLInputElement>) => void;
    onBlur?: (event: React.SyntheticEvent<HTMLInputElement>) => void;
    className?: string;
    inputClassName?: string;
    decoratorClassName?: string;
    attributes?: G.Attributes<"div">;
    inputAttributes?: G.Attributes<"input">;
    prefixAttributes?: G.Attributes<"div">;
    suffixAttributes?: G.Attributes<"div">;
    mixin?: FormControlProps["mixin"];
};
export type ControlledProps = BaseProps & {
    value: string | null;
    defaultValue?: never;
};
export type UncontrolledProps = BaseProps & {
    value?: never;
    defaultValue?: string;
};
export type Props = ControlledProps | UncontrolledProps;
export {};
